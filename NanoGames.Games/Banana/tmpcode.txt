         private void updatePixelLines()
        {
            // updates all lines from each pixel by looking at the 8 neighbouring pixels

            for (int i = xMin; i < xMax; i++)
            {
                for (int j = yMin; j < yMax; j++)
                {
                    var pixel = PixelMap[i, j];

                    // remove all lines
                    pixel.Lines.Clear();

                    // add lines according to neighbours

                    // left vertical line
                    if (pixel.IsSolid &&
                        !PixelMap[i - 1, j - 1].IsSolid &&
                        !PixelMap[i - 1, j].IsSolid &&
                        !PixelMap[i - 1, j + 1].IsSolid)
                    {
                        pixel.Lines.Add(new Segment(new Vector(i, j), new Vector(i, j + 1)));
                    }

                    // right vertical line
                    if (pixel.IsSolid &&
                        !PixelMap[i + 1, j - 1].IsSolid &&
                        !PixelMap[i + 1, j].IsSolid &&
                        !PixelMap[i + 1, j + 1].IsSolid)
                    {
                        pixel.Lines.Add(new Segment(new Vector(i + 1, j), new Vector(i + 1, j + 1)));
                    }

                    // top horizontal line
                    if (pixel.IsSolid &&
                        !PixelMap[i - 1, j - 1].IsSolid &&
                        !PixelMap[i, j - 1].IsSolid &&
                        !PixelMap[i + 1, j - 1].IsSolid)
                    {
                        pixel.Lines.Add(new Segment(new Vector(i, j), new Vector(i + 1, j)));
                    }

                    // right vertical line
                    if (pixel.IsSolid &&
                        !PixelMap[i - 1, j + 1].IsSolid &&
                        !PixelMap[i, j + 1].IsSolid &&
                        !PixelMap[i + 1, j + 1].IsSolid)
                    {
                        pixel.Lines.Add(new Segment(new Vector(i, j + 1), new Vector(i + 1, j + 1)));
                    }

                    // diagonals
                    bool slashTop = PixelMap[i - 1, j].IsSolid && PixelMap[i, j - 1].IsSolid;
                    bool backslashTop = PixelMap[i, j - 1].IsSolid && PixelMap[i + 1, j].IsSolid;
                    bool slashBot = PixelMap[i + 1, j].IsSolid && PixelMap[i, j + 1].IsSolid;
                    bool backslashBot = PixelMap[i - 1, j].IsSolid && PixelMap[i, j + 1].IsSolid;

                    // slash
                    if (!pixel.IsSolid &&
                        (!slashTop && slashBot) ||
                        (slashTop && !slashBot))
                    {
                        pixel.Lines.Add(new Segment(new Vector(i, j + 1), new Vector(i + 1, j)));
                    }

                    // backslash
                    if (!pixel.IsSolid &&
                        (backslashTop && !backslashBot) ||
                        (!backslashTop && backslashBot))
                    {
                        pixel.Lines.Add(new Segment(new Vector(i, j), new Vector(i + 1, j + 1)));
                    }

                    // one pixel cavity

                    // top side open
                    if (!pixel.IsSolid &&
                        !PixelMap[i, j - 1].IsSolid &&
                        PixelMap[i - 1, j].IsSolid &&
                        PixelMap[i + 1, j].IsSolid &&
                        PixelMap[i, j + 1].IsSolid)
                    {
                        pixel.Lines.Add(new Segment(new Vector(i, j), new Vector(i + 0.5, j + 0.5)));
                        pixel.Lines.Add(new Segment(new Vector(i + 0.5, j + 0.5), new Vector(i + 1, j)));
                    }

                    // bottom side open
                    if (!pixel.IsSolid &&
                        !PixelMap[i, j + 1].IsSolid &&
                        PixelMap[i - 1, j].IsSolid &&
                        PixelMap[i + 1, j].IsSolid &&
                        PixelMap[i, j - 1].IsSolid)
                    {
                        pixel.Lines.Add(new Segment(new Vector(i, j + 1), new Vector(i + 0.5, j + 0.5)));
                        pixel.Lines.Add(new Segment(new Vector(i + 0.5, j + 0.5), new Vector(i + 1, j + 1)));
                    }

                    // left side open
                    if (!pixel.IsSolid &&
                        !PixelMap[i - 1, j].IsSolid &&
                        PixelMap[i, j - 1].IsSolid &&
                        PixelMap[i, j + 1].IsSolid &&
                        PixelMap[i + 1, j].IsSolid)
                    {
                        pixel.Lines.Add(new Segment(new Vector(i, j), new Vector(i + 0.5, j + 0.5)));
                        pixel.Lines.Add(new Segment(new Vector(i + 0.5, j + 0.5), new Vector(i, j + 1)));
                    }

                    // right side open
                    if (!pixel.IsSolid &&
                        !PixelMap[i + 1, j].IsSolid &&
                        PixelMap[i, j - 1].IsSolid &&
                        PixelMap[i, j + 1].IsSolid &&
                        PixelMap[i - 1, j].IsSolid)
                    {
                        pixel.Lines.Add(new Segment(new Vector(i + 1, j), new Vector(i + 0.5, j + 0.5)));
                        pixel.Lines.Add(new Segment(new Vector(i + 0.5, j + 0.5), new Vector(i + 1, j + 1)));
                    }

                    // hole
                    if (!pixel.IsSolid &&
                        PixelMap[i - 1, j].IsSolid &&
                        PixelMap[i + 1, j].IsSolid &&
                        PixelMap[i, j - 1].IsSolid &&
                        PixelMap[i, j + 1].IsSolid)
                    {
                        // maybe insert some little hole in here
                    }

                }
            }
        }